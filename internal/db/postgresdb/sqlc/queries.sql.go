// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users DEFAULT VALUES
    RETURNING user_id
`

func (q *Queries) CreateUser(ctx context.Context) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, createUser)
	var user_id uuid.UUID
	err := row.Scan(&user_id)
	return user_id, err
}

const findFullByShort = `-- name: FindFullByShort :one
SELECT original_url, is_deleted
    FROM url_redirects
    WHERE short = $1
`

type FindFullByShortRow struct {
	OriginalUrl string `json:"original_url"`
	IsDeleted   bool   `json:"is_deleted"`
}

func (q *Queries) FindFullByShort(ctx context.Context, short string) (FindFullByShortRow, error) {
	row := q.db.QueryRowContext(ctx, findFullByShort, short)
	var i FindFullByShortRow
	err := row.Scan(&i.OriginalUrl, &i.IsDeleted)
	return i, err
}

const findShortByFull = `-- name: FindShortByFull :one
SELECT short
    FROM url_redirects
    WHERE original_url = $1
`

func (q *Queries) FindShortByFull(ctx context.Context, originalUrl string) (string, error) {
	row := q.db.QueryRowContext(ctx, findShortByFull, originalUrl)
	var short string
	err := row.Scan(&short)
	return short, err
}

const findShortsByFulls = `-- name: FindShortsByFulls :many
SELECT short, original_url
    FROM url_redirects
    WHERE original_url = ANY($1::text[])
`

type FindShortsByFullsRow struct {
	Short       string `json:"short"`
	OriginalUrl string `json:"original_url"`
}

func (q *Queries) FindShortsByFulls(ctx context.Context, originalUrls []string) ([]FindShortsByFullsRow, error) {
	rows, err := q.db.QueryContext(ctx, findShortsByFulls, pq.Array(originalUrls))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []FindShortsByFullsRow{}
	for rows.Next() {
		var i FindShortsByFullsRow
		if err := rows.Scan(&i.Short, &i.OriginalUrl); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNumberOfShortenedURLs = `-- name: GetNumberOfShortenedURLs :one
SELECT COUNT(*) FROM url_redirects WHERE NOT is_deleted
`

func (q *Queries) GetNumberOfShortenedURLs(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getNumberOfShortenedURLs)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getNumberOfUsers = `-- name: GetNumberOfUsers :one
SELECT COUNT(*) FROM users
`

func (q *Queries) GetNumberOfUsers(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getNumberOfUsers)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT user_id
    FROM users
    WHERE user_id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, userID uuid.UUID) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, userID)
	var user_id uuid.UUID
	err := row.Scan(&user_id)
	return user_id, err
}

const getUserUrls = `-- name: GetUserUrls :many
SELECT url_redirects.original_url, url_redirects.short
    FROM url_redirects
        JOIN users_urls ON
            users_urls.url = url_redirects.original_url
                AND users_urls.user_id = $1
                AND NOT url_redirects.is_deleted
`

type GetUserUrlsRow struct {
	OriginalUrl string `json:"original_url"`
	Short       string `json:"short"`
}

func (q *Queries) GetUserUrls(ctx context.Context, userID uuid.UUID) ([]GetUserUrlsRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserUrls, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetUserUrlsRow{}
	for rows.Next() {
		var i GetUserUrlsRow
		if err := rows.Scan(&i.OriginalUrl, &i.Short); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertURLMapping = `-- name: InsertURLMapping :exec
INSERT INTO url_redirects (short, original_url)
    VALUES ($1, $2)
`

type InsertURLMappingParams struct {
	Short       string `json:"short"`
	OriginalUrl string `json:"original_url"`
}

func (q *Queries) InsertURLMapping(ctx context.Context, arg InsertURLMappingParams) error {
	_, err := q.db.ExecContext(ctx, insertURLMapping, arg.Short, arg.OriginalUrl)
	return err
}

const isShortExists = `-- name: IsShortExists :one
SELECT EXISTS (
    SELECT 1 FROM url_redirects WHERE short = $1
)
`

func (q *Queries) IsShortExists(ctx context.Context, short string) (bool, error) {
	row := q.db.QueryRowContext(ctx, isShortExists, short)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const removeUsersUrls = `-- name: RemoveUsersUrls :exec
UPDATE url_redirects
    SET is_deleted = true
    FROM users_urls
    WHERE url_redirects.original_url = users_urls.url
        AND users_urls.user_id = $1
        AND url_redirects.short = $2
`

type RemoveUsersUrlsParams struct {
	UserID   uuid.UUID `json:"user_id"`
	ShortUrl string    `json:"short_url"`
}

func (q *Queries) RemoveUsersUrls(ctx context.Context, arg RemoveUsersUrlsParams) error {
	_, err := q.db.ExecContext(ctx, removeUsersUrls, arg.UserID, arg.ShortUrl)
	return err
}

const resetDB = `-- name: ResetDB :exec
DO $$
DECLARE
    r RECORD;
BEGIN
    FOR r IN (SELECT tablename FROM pg_tables WHERE schemaname = 'public') LOOP
        EXECUTE 'DROP TABLE IF EXISTS ' || quote_ident(r.tablename) || ' CASCADE';
    END LOOP;
END $$
`

func (q *Queries) ResetDB(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, resetDB)
	return err
}

const saveURLMapping = `-- name: SaveURLMapping :exec
INSERT INTO url_redirects (short, original_url)
    VALUES ($1, $2)
    ON CONFLICT DO NOTHING
`

type SaveURLMappingParams struct {
	Short       string `json:"short"`
	OriginalUrl string `json:"original_url"`
}

func (q *Queries) SaveURLMapping(ctx context.Context, arg SaveURLMappingParams) error {
	_, err := q.db.ExecContext(ctx, saveURLMapping, arg.Short, arg.OriginalUrl)
	return err
}

const saveUserUrl = `-- name: SaveUserUrl :exec
INSERT INTO users_urls (user_id, url)
    VALUES ($1, $2)
    ON CONFLICT (user_id, url) DO UPDATE
        SET
            user_id = EXCLUDED.user_id,
            url = EXCLUDED.url
`

type SaveUserUrlParams struct {
	UserID uuid.UUID `json:"user_id"`
	Url    string    `json:"url"`
}

func (q *Queries) SaveUserUrl(ctx context.Context, arg SaveUserUrlParams) error {
	_, err := q.db.ExecContext(ctx, saveUserUrl, arg.UserID, arg.Url)
	return err
}
